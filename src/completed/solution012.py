#!/usr/bin/env python
# -*- coding: utf-8 -*-

from functools import reduce

"""
Question:


The sequence of triangle numbers is generated by adding the natural numbers. So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28. The first ten terms would be:

1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...

Let us list the factors of the first seven triangle numbers:

     1: 1
     3: 1,3
     6: 1,2,3,6
    10: 1,2,5,10
    15: 1,3,5,15
    21: 1,3,7,21
    28: 1,2,4,7,14,28

We can see that 28 is the first triangle number to have over five divisors.

What is the value of the first triangle number to have over five hundred divisors?

"""

def factor_gen(n):
    factor = 2
    while n > 1:
        if factor == 1:
            yield (1, 1)
            factor += 1

        multiplicity = 0
        while n % factor == 0:
            multiplicity += 1
            n //= factor

        if multiplicity != 0:
            yield (factor, multiplicity)

        # Because we have already excluded all even factors, we can
        # increment the factor by 2
        if factor < 3:
            factor += 1
        else:
            factor += 2

def divisor_gen(n):
    factors = list(factor_gen(n))
    nfactors = len(factors)
    f = [0] * nfactors
    while True:
        yield reduce(lambda x, y: x*y, [factors[x][0]**f[x] for x in range(nfactors)], 1)
        i = 0
        while True:
            f[i] += 1
            if f[i] <= factors[i][1]:
                break
            f[i] = 0
            i += 1
            if i >= nfactors:
                return

def solution():
    """
    Solution to the problem.

    The number of divisors:
        all combinations(number of factors) += \
            sum(len(factors) choose i for i in range(len(factors)))
    """
    triangle_number = 1
    i = 1
    divisor_number = 1
    while divisor_number < 500:
        i += 1
        triangle_number += i
        factors = list(factor_gen(triangle_number))
        divisors = list(divisor_gen(triangle_number))
        divisor_number = len(divisors)

    print("{0} ({2}): {1}".format(triangle_number, divisors, divisor_number))
    return triangle_number


def main():
    """ The main function

    """
    from time import time
    start = time()
    answer = solution()
    print("Answer is: {}".format(answer))
    print("Solved in {:.3f}s".format(time() - start))

if __name__ == "__main__":
    main()
